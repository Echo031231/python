# 列表类型


# 列表定义
'''
# []直接定义
ls = [1010, "1010", [1010, "1010"], 1010]
print(ls)


# 字符串转为列表
ls = list("列表可以由字符串生成")
print(ls)
print(type(ls))


# 生成空列表
ls = list()
print(ls)

'''


# 列表操作(序列类型的操作符和函数)



# | **操作**                          | **类型**   | **描述**                              | **示例**                                 |
# |-----------------------------------|------------|---------------------------------------|------------------------------------------|
# | **索引操作符（`[]`）**               | 操作符      | 访问序列中的某个元素                     | `lst[0]` -> `1`                           |
# | **切片操作符（`[:]`）**               | 操作符      | 提取序列的一个子序列                     | `lst[1:4]` -> `[2, 3, 4]`                 |
# | **连接操作符（`+`）**                | 操作符      | 连接两个序列                           | `[1, 2] + [3, 4]` -> `[1, 2, 3, 4]`       |
# | **重复操作符（`*`）**                | 操作符      | 重复序列的元素                         | `[1, 2] * 3` -> `[1, 2, 1, 2, 1, 2]`     |
# | **长度函数（`len()`）**              | 函数        | 返回序列的长度                        | `len(lst)` -> `5`                         |
# | **查找函数（`index()`）**            | 方法        | 查找元素在序列中的位置                  | `lst.index(3)` -> `2`                    |
# | **计数函数（`count()`）**            | 方法        | 计算序列中某个元素出现的次数            | `lst.count(2)` -> `1`                    |
# | **追加函数（`append()`）**           | 方法        | 在列表末尾添加一个元素                  | `lst.append(6)` -> `[1, 2, 3, 4, 5, 6]`   |
# | **插入函数（`insert()`）**           | 方法        | 在指定位置插入一个元素                  | `lst.insert(1, 7)` -> `[1, 7, 2, 3, 4, 5]`|
# | **删除函数（`remove()`）**           | 方法        | 删除序列中第一个匹配的元素               | `lst.remove(2)` -> `[1, 3, 4, 5]`        |
# | **弹出函数（`pop()`）**              | 方法        | 删除并返回指定位置的元素                | `lst.pop(2)` -> `4`                      |
# | **排序函数（`sort()`）**             | 方法        | 对列表进行原地排序                     | `lst.sort()` -> `[1, 2, 3, 4, 5]`       |
# | **反转函数（`reverse()`）**          | 方法        | 对列表进行原地反转                     | `lst.reverse()` -> `[5, 4, 3, 2, 1]`     |
# | **清空函数（`clear()`）**            | 方法        | 清空列表中的所有元素                   | `lst.clear()` -> `[]`                    |
# | **转换函数（`tuple()`）**            | 函数        | 将列表转换为元组                       | `tuple([1, 2, 3])` -> `(1, 2, 3)`        |
# | **转换函数（`list()`）**             | 函数        | 将元组或字符串转换为列表               | `list((1, 2, 3))` -> `[1, 2, 3]`        |
# | **转换函数（`str()`）**              | 函数        | 将其他类型转换为字符串                 | `str(123)` -> `'123'`                   |
# | **分割函数（`split()`）**             | 方法        | 分割字符串为列表                       | `"a,b,c".split(',')` -> `['a', 'b', 'c']` |
# | **连接函数（`join()`）**             | 方法        | 将列表中的字符串连接为一个字符串       | `','.join(['a', 'b', 'c'])` -> `'a,b,c'`  |
# | **查找函数（`find()`）**             | 方法        | 查找子串在字符串中的位置               | `"hello".find('e')` -> `1`              |
# | **替换函数（`replace()`）**           | 方法        | 替换字符串中的某部分                   | `"hello".replace('e', 'a')` -> `'hallo'` |

# ### 说明

# - **操作符**：`[]`, `[:]`, `+`, `*` 是用于操作序列的基本操作符。
# - **函数**：`len()`, `tuple()`, `list()`, `str()` 是独立于对象的函数，用于转换和计算。
# - **方法**：`index()`, `count()`, `append()`, `insert()`, `remove()`, `pop()`, `sort()`, `reverse()`, `clear()`, `split()`, `join()`, `find()`, `replace()` 是绑定到对象上的方法，用于操作具体的对象状态或属性。



# 示例

ls = [1010, "1010", [1010, "1010"], 1010]
print(ls)

# 操作符---in---not in---
print(1010 in ls)
print("1010" not in ls)

# 操作符---+---
lt = [1, 2, 3]
print(ls + lt)

# 操作符---* n---(将列表赋值n次)
print(lt * 2)
print(2 * lt)

# 返回序列的长度
print(len(ls))

# 查找元素在序列中的位置
print(ls.index(1010))

# 计算序列中某个元素出现的次数
print(ls.count(1010))





