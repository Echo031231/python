
# 时间戳（Timestamp）:

# 时间戳（Timestamp）是一个用来表示时间的数字，通常表示自某个基准时间（通常是1970年1月1日的00:00:00 UTC，称为“纪元”或“UNIX纪元”）以来的秒数。
# 时间戳广泛用于计算机系统和数据库中，以统一和标准化地记录和处理时间信息








# struct_time对象:

# struct_time 对象是 Python 的 time 模块中用于表示时间的一种数据结构。它是一个具名元组，包含了时间的各个组成部分。struct_time 对象通常由 time.localtime()、time.gmtime()、time.strptime() 等函数返回。

# struct_time 对象的字段
# struct_time 对象包含以下字段，按顺序排列：

# tm_year: 年份（例如：2024）
# tm_mon: 月份（1-12）
# tm_mday: 日期（1-31）
# tm_hour: 小时（0-23）
# tm_min: 分钟（0-59）
# tm_sec: 秒钟（0-59）
# tm_wday: 星期几（0-6，0是星期一）
# tm_yday: 一年中的第几天（1-366）
# tm_isdst: 夏令时标志（0：没有夏令时，1：有夏令时，-1：未知







'''
# 时间处理函数:

# | **函数**                     | **功能描述**                                                   | **参数**                          | **返回值**                         | **示例用法**                                    |
# |----------------------------|------------------------------------------------------------|----------------------------------|----------------------------------|-----------------------------------------------|
# | `time.time()`              | 获取当前时间的时间戳。                                          | 无                               | 自纪元以来的秒数（浮点数）              | `timestamp = time.time()`                     |
# | `time.localtime([secs])`   | 将时间戳（或当前时间）转换为本地时间的 `struct_time` 对象。      | `secs`（可选）：时间戳               | `struct_time` 对象                 | `local_time = time.localtime()`              |
# | `time.gmtime([secs])`      | 将时间戳（或当前时间）转换为 UTC 时间的 `struct_time` 对象。     | `secs`（可选）：时间戳               | `struct_time` 对象                 | `utc_time = time.gmtime()`                   |
# | `time.ctime([secs])`       | 将时间戳（或当前时间）转换为可读的字符串形式。                    | `secs`（可选）：时间戳               | 可读的时间字符串                    | `readable_time = time.ctime()`                |

# 这个表格现在包括了 `time` 模块中用于时间处理的四个主要函数。
'''







'''
# 时间格式化三个函数:

# 以下是 `time` 模块中时间格式化相关函数的表格：

# | **函数**             | **功能描述**                                          | **参数**                          | **返回值**                     | **示例用法**                                    |
# |----------------------|-----------------------------------------------------|----------------------------------|--------------------------------|-----------------------------------------------|
# | `time.strptime()`    | 将时间字符串解析为 `struct_time` 对象。              | `string`：时间字符串<br>`format`：时间格式 | `struct_time` 对象             | `parsed_time = time.strptime("2024-08-16 10:30:45", "%Y-%m-%d %H:%M:%S")` |
# | `time.strftime()`    | 将 `struct_time` 对象格式化为时间字符串。            | `format`：输出格式<br>`t`（可选）：`struct_time` 对象 | 格式化后的时间字符串           | `formatted_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())` |
# | `time.mktime()`      | 将 `struct_time` 对象转换为时间戳（秒数）。            | `t`：`struct_time` 对象           | 时间戳（浮点数）                | `timestamp = time.mktime(time.localtime())`   |

# 这个表格包含了时间格式化和转换的三个主要函数及其相关信息。

`strftime()` 方法用于将 `struct_time` 对象格式化为一个时间字符串，它允许使用各种格式化控制符来指定时间的显示格式。以下是常用的格式化控制符：

### 常用格式化控制符

| **控制符** | **描述**                                 | **示例**           |
|------------|----------------------------------------|--------------------|
| `%Y`       | 四位年份                                | `2024`             |
| `%m`       | 两位月份（01-12）                       | `08`               |
| `%d`       | 两位日期（01-31）                       | `16`               |
| `%H`       | 两位小时（00-23）                      | `10`               |
| `%M`       | 两位分钟（00-59）                      | `30`               |
| `%S`       | 两位秒钟（00-59）                      | `45`               |
| `%a`       | 缩写的星期几名称（英文）               | `Thu`              |
| `%A`       | 全写的星期几名称（英文）               | `Thursday`         |
| `%b`       | 缩写的月份名称（英文）                 | `Aug`              |
| `%B`       | 全写的月份名称（英文）                 | `August`           |
| `%j`       | 一年中的第几天（001-366）              | `229`              |
| `%w`       | 星期几（0-6, 0 是星期日）             | `4` (表示星期四)   |
| `%p`       | AM 或 PM（12 小时制）                  | `AM` or `PM`       |
| `%I`       | 两位小时（01-12, 12 小时制）           | `10`               |
| `%z`       | UTC 偏移量（如 +0200）                  | `+0000`            |
| `%Z`       | 时区名称                                | `UTC`              |
| `%c`       | 本地时间的日期和时间表示                | `Thu Aug 16 10:30:45 2024` |
| `%x`       | 本地日期表示                            | `08/16/2024`       |
| `%X`       | 本地时间表示                            | `10:30:45`         |
'''




'''
# 计时三个函数:
以下是 `time` 模块中与计时相关的三个函数的表格：


| **函数**               | **功能描述**                                      | **参数**             | **返回值**                  | **示例用法**                                         |
|------------------------|---------------------------------------------------|-----------------------|-----------------------------|------------------------------------------------------|
| `time.sleep(secs)`     | 使程序暂停指定的秒数。                           | `secs`：暂停的秒数（浮点数） | 无（函数暂停执行）           | `time.sleep(2.5)`  # 暂停 2.5 秒                   |
| `time.monotonic()`     | 返回系统的单调时间（从某个固定时间点开始计时），用于测量时间间隔。 | 无                    | 单调时间（浮点数，秒数）      | `start_time = time.monotonic()`<br>`end_time = time.monotonic()`<br>`elapsed = end_time - start_time` |
| `time.perf_counter()`  | 返回系统的高精度时间（包含睡眠时间），用于测量时间间隔。  | 无                    | 高精度时间（浮点数，秒数）    | `start_time = time.perf_counter()`<br>`end_time = time.perf_counter()`<br>`elapsed = end_time - start_time` |



### 详细说明

1. **`time.sleep(secs)`**：
   - **功能**：使程序暂停指定的时间（秒），常用于等待或延迟操作。
   - **参数**：`secs` 是暂停的秒数，可以是浮点数。
   - **返回值**：该函数没有返回值，它只是使程序暂停执行。

2. **`time.monotonic()`**：
   - **功能**：返回一个系统的单调时间，用于测量时间间隔。单调时间不会受到系统时间更改的影响（例如，系统时间调整或夏令时变化）。
   - **参数**：无。
   - **返回值**：一个浮点数，表示从某个固定时间点开始的秒数。通常用于计算时间差。

3. **`time.perf_counter()`**：
   - **功能**：返回系统的高精度时间，包含了系统睡眠时间。适合用于测量短时间间隔。
   - **参数**：无。
   - **返回值**：一个浮点数，表示从某个不确定的时间点开始的秒数，提供了高精度的时间计量。

这些函数用于不同的计时需求，`sleep()` 用于暂停程序，`monotonic()` 和 `perf_counter()` 用于高精度的时间测量。




'''