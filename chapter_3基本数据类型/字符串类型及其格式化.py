# 1. 以下是一些常见的转义字符及其含义：
'''
1. **`\n`**：换行符，表示开始新的一行。
2. **`\t`**：制表符（tab），相当于按下 Tab 键。
3. **`\\`**：反斜杠，用于表示一个实际的反斜杠字符。
4. **`\'`**：单引号，用于在单引号字符串中插入一个实际的单引号。
5. **`\"`**：双引号，用于在双引号字符串中插入一个实际的双引号。
6. **`\r`**：回车符，返回到当前行的开头，但不换行。
7. **`\b`**：退格符，删除前一个字符。
8. **`\f`**：换页符，换到下一个页面。

# Python 的 `print()` 函数可以解析大部分常见的转义字符，这些转义字符通常用于在字符串中表示特殊字符或控制字符。
'''


# 2.字符串的格式化控制:
# 2.1 字符串的格式控制:
'''
根据你的要求，以下是将 Python 字符串格式化中的 `{<参数符号>:<格式控制标记>}` 分为六类的详细分类表格：

### 1. 填充
填充字符是用于填充输出宽度的字符，默认是空格。

| 格式控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `<填充>`      | 指定填充字符 | `"{:*<10}".format("left")` | `left******` |
| `<填充>`      | 也可用于其他对齐方式 | `"{:_>10}".format("right")` | `_____right` |

### 2. 对齐
对齐方式决定了内容在指定宽度内的对齐方式。
# 默认左对齐

| 格式控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `<`           | 左对齐 | `"{:<10}".format("left")` | `left      ` |
| `>`           | 右对齐 | `"{:>10}".format("right")` | `     right` |
| `^`           | 居中对齐 | `"{:^10}".format("center")` | `  center  ` |
| `=`           | 填充字符后对齐（仅用于数字） | `"{:=+10}".format(-42)` | `-      42` |

### 3. 宽度
宽度用于指定输出的最小宽度。如果内容的长度小于指定宽度，则使用填充字符进行填充(默认以空格补充)。
# 预设宽度不足实际宽度, 则以实际宽度为准

| 格式控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `<宽度>`      | 指定最小宽度 | `"{:10}".format("text")` | `text      ` |
| `<宽度>`      | 与对齐结合使用 | `"{:^10}".format("center")` | `  center  ` |

### 4. `,` 千位分隔符
`,` 是用于将数字格式化为带有千位分隔符的格式。

| 格式控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `,`           | 添加千位分隔符 | `"{:,}".format(1000000)` | `1,000,000` |
| `,`           | 与宽度、对齐结合使用 | `"{:>15,}".format(1000000)` | `    1,000,000` |

### 5. 精度
精度用于控制浮点数的小数位数或科学计数法的精度。

| 格式控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `.n`          | 保留 n 位小数 | `"{:.2f}".format(3.14159)` | `3.14` |
| `.n`          | 科学计数法保留 n 位小数 | `"{:.2e}".format(12345.6789)` | `1.23e+04` |


### 6. 类型
### 整数类型
| 类型控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `d`           | 十进制整数 | `"{:d}".format(42)` | `42` |
| `b`           | 二进制 | `"{:b}".format(42)` | `101010` |
| `o`           | 八进制 | `"{:o}".format(42)` | `52` |
| `x`           | 十六进制（小写） | `"{:x}".format(255)` | `ff` |
| `X`           | 十六进制（大写） | `"{:X}".format(255)` | `FF` |
| `c`           | 字符（将整数转换为对应的 Unicode 字符） | `"{:c}".format(65)` | `A` |
| `#b`          | 带前缀的二进制 | `"{:#b}".format(42)` | `0b101010` |
| `#o`          | 带前缀的八进制 | `"{:#o}".format(42)` | `0o52` |
| `#x`          | 带前缀的十六进制（小写） | `"{:#x}".format(255)` | `0xff` |
| `#X`          | 带前缀的十六进制（大写） | `"{:#X}".format(255)` | `0XFF` |
| `d` 与宽度    | 指定宽度的十进制整数 | `"{:5d}".format(42)` | `   42` |
| `d` 与填充    | 指定填充字符的十进制整数 | `"{:05d}".format(42)` | `00042` |

### 浮点数类型
| 类型控制标记 | 描述 | 示例 | 输出 |
|---------------|------|------|------|
| `f`           | 定点数（默认保留小数点后 6 位） | `"{:f}".format(3.14159)` | `3.141590` |
| `.nf`         | 定点数（保留 n 位小数） | `"{:.2f}".format(3.14159)` | `3.14` |
| `e`           | 科学计数法（小写 e，默认保留 6 位小数） | `"{:e}".format(12345.6789)` | `1.234568e+04` |
| `.ne`         | 科学计数法（保留 n 位小数） | `"{:.2e}".format(12345.6789)` | `1.23e+04` |
| `E`           | 科学计数法（大写 E） | `"{:E}".format(12345.6789)` | `1.234568E+04` |
| `.nE`         | 科学计数法（大写 E，保留 n 位小数） | `"{:.2E}".format(12345.6789)` | `1.23E+04` |
| `%`           | 百分比（乘以 100 后显示，默认保留 6 位小数） | `"{:%}".format(0.25)` | `25.000000%` |
| `.n%`         | 百分比（乘以 100 后显示，保留 n 位小数） | `"{:.2%}".format(0.25)` | `25.00%` |



### 综合示例
一个更复杂的例子将这些标记结合起来使用：

```python
print("{:*^20,.2f}".format(1234567.8910))
```
输出:
```
****1,234,567.89*****
```

这个表格将格式控制标记分
'''
# 2.2 Unicode字符解释
'''
Unicode 是一种字符编码标准，它为全球几乎所有的文字、符号、标点符号等字符分配了一个唯一的数字编号\
（称为码点，通常表示为 U+ 后跟一个十六进制值）。\
这使得不同语言和符号可以统一表示，并且在不同平台和系统之间具有良好的兼容性
'''


# 3. 字符串类型的操作:
# 3.1 字符串操作符:
"""
下面是三个基本字符串操作符及其功能的表格：

| 操作符 | 描述                           | 示例                              |
|--------|--------------------------------|-----------------------------------|
| `+`    | 连接两个字符串                 | `"Hello" + " World"` -> `"Hello World"` |
| `*`    | 重复字符串指定的次数           | `"Hi" * 3` -> `"HiHiHi"`          |
| `[]`   | 访问字符串中的特定字符或子串   | `"Python"[0]` -> `"P"`            |
| `in`   | 检查子串是否存在于字符串中     | `"Py" in "Python"` -> `True`      |
"""
# 3.2 字符串处理函数:
"""
### 字符串函数

| 函数       | 描述                                   | 示例                         |
|------------|----------------------------------------|------------------------------|
| `len()`    | 返回字符串的长度                       | `len("Hello")` -> `5`        |
| `str()`    | 将其他数据类型转换为字符串             | `str(123)` -> `'123'`        |
| `bytes()`  | 将字符串转换为字节对象                 | `bytes("Hello", "utf-8")` -> `b'Hello'` |
| `chr()`    | 将整数转换为对应的字符                 | `chr(65)` -> `'A'`           |
| `ord()`    | 将字符转换为对应的整数                 | `ord('A')` -> `65`           |
| `hex()`    | 将整数转换为十六进制字符串             | `hex(255)` -> `'0xff'`       |
| `oct()`    | 将整数转换为八进制字符串               | `oct(8)` -> `'0o10'`        |

"""
# 3.3 字符串处理方法:
"""
当然，我会将 `center()` 和 `count()` 方法添加到 `replace()` 之后的表格中。以下是更新后的字符串方法表格：

### 字符串方法

| 方法              | 描述                                               | 示例                                |
|-------------------|----------------------------------------------------|-------------------------------------|
| `lower()`         | 将字符串中的所有字符转换为小写                     | `"HELLO".lower()` -> `'hello'`      |
| `upper()`         | 将字符串中的所有字符转换为大写                     | `"hello".upper()` -> `'HELLO'`      |
| `strip()`         | 移除字符串前后两端的空格或指定字符                 | `"  hello  ".strip()` -> `'hello'`  |
| `split()`         | 根据指定的分隔符将字符串拆分为列表                 | `"a,b,c".split(",")` -> `['a', 'b', 'c']` |
| `join()`          | 将序列中的元素连接成一个字符串                     | `",".join(['a', 'b', 'c'])` -> `'a,b,c'` |
| `replace()`       | 将字符串中的指定子串替换为另一个子串               | `"Hello World".replace("World", "Python")` -> `'Hello Python'` |
| `center()`        | 将字符串居中，并使用指定字符（默认为空格）填充左右两侧 | `"Hello".center(11, '*')` -> `'***Hello***'` |
| `count()`         | 统计子串在字符串中出现的次数                       | `"banana".count("a")` -> `3`        |
| `find()`          | 查找子串在字符串中的位置，找不到返回 -1            | `"Hello".find("e")` -> `1`          |
| `rfind()`         | 从右侧开始查找子串在字符串中的位置，找不到返回 -1  | `"Hello".rfind("o")` -> `4`         |
| `startswith()`    | 检查字符串是否以指定的前缀开头                     | `"Hello".startswith("He")` -> `True` |
| `endswith()`      | 检查字符串是否以指定的后缀结尾                     | `"Hello".endswith("lo")` -> `True`  |
| `isdigit()`       | 检查字符串是否只包含数字字符                       | `"123".isdigit()` -> `True`         |
| `isalpha()`       | 检查字符串是否只包含字母字符                       | `"Hello".isalpha()` -> `True`       |
| `isalnum()`       | 检查字符串是否只包含字母和数字字符                 | `"Hello123".isalnum()` -> `True`    |
| `isspace()`       | 检查字符串是否只包含空白字符                       | `"   ".isspace()` -> `True`         |
| `istitle()`       | 检查字符串是否为标题格式（每个单词首字母大写）     | `"Hello World".istitle()` -> `True` |
| `partition()`     | 将字符串分成三部分，分别是分隔符前、分隔符和分隔符后部分 | `"a,b,c".partition(",")` -> `('a', ',', 'b,c')` |
| `rpartition()`    | 从右侧开始将字符串分成三部分                       | `"a,b,c".rpartition(",")` -> `('a,b', ',', 'c')` |
| `zfill()`         | 在字符串左侧填充零，直到达到指定长度               | `"42".zfill(5)` -> `'00042'`        |
| `format()`        | 使用格式化字符串替换指定位置的占位符               | `"Hello {}".format("World")` -> `'Hello World'` |
| `casefold()`      | 转换字符串为小写，适用于更广泛的字符比较           | `"HELLO".casefold()` -> `'hello'`   |
| `encode()`        | 将字符串编码为指定的字节类型                       | `"hello".encode("utf-8")` -> `b'hello'` |
| `rjust()`         | 在字符串右侧填充指定字符，直到达到指定长度         | `"42".rjust(5, '0')` -> `'00042'`   |
| `ljust()`         | 在字符串左侧填充指定字符，直到达到指定长度         | `"42".ljust(5, '0')` -> `'42000'`   |
"""
# 3.4 字符串比较运算:
'''
在Python中，字符串比较运算用于比较两个字符串的字典序。
比较运算符的使用和数学上的比较类似，但是按字符的ASCII值或Unicode值进行比较。

### 字符串比较运算符

| 运算符 | 描述                                  | 示例                                    |
|--------|---------------------------------------|-----------------------------------------|
| `==`   | 判断两个字符串是否相等                | `"abc" == "abc"` -> `True`              |
| `!=`   | 判断两个字符串是否不相等              | `"abc" != "def"` -> `True`              |
| `<`    | 判断字符串是否小于另一个字符串（按字典序） | `"abc" < "def"` -> `True`               |
| `<=`   | 判断字符串是否小于或等于另一个字符串（按字典序） | `"abc" <= "abc"` -> `True`              |
| `>`    | 判断字符串是否大于另一个字符串（按字典序） | `"def" > "abc"` -> `True`               |
| `>=`   | 判断字符串是否大于或等于另一个字符串（按字典序） | `"def" >= "abc"` -> `True`              |

#### 示例

1. **相等**:
   ```python
   s1 = "apple"
   s2 = "apple"
   print(s1 == s2)  # 输出: True
   ```

2. **不相等**:
   ```python
   s1 = "apple"
   s2 = "banana"
   print(s1 != s2)  # 输出: True
   ```

3. **小于**:
   ```python
   s1 = "apple"
   s2 = "banana"
   print(s1 < s2)  # 输出: True
   ```

4. **小于或等于**:
   ```python
   s1 = "apple"
   s2 = "apple"
   print(s1 <= s2)  # 输出: True
   ```

5. **大于**:
   ```python
   s1 = "banana"
   s2 = "apple"
   print(s1 > s2)  # 输出: True
   ```

6. **大于或等于**:
   ```python
   s1 = "banana"
   s2 = "banana"
   print(s1 >= s2)  # 输出: True
   ```

这些比较运算符可以用于条件判断、排序、筛选等操作中。字符串的比较是基于每个字符的Unicode码点，按字典序逐个字符进行比较。
如果前面的字符相等，则继续比较下一个字符，直到找到不同的字符或到达字符串末尾。

'''



# 4. 类型判断和类型间转换:
# 4.1 类型判断:
'''
`type()` 函数是 Python 的内置函数之一，用于返回对象的类型。它可以帮助你确定一个对象属于哪个数据类型或类。

### 语法

```python
type(object)
```

- **`object`**：你想要检查类型的对象。

### 返回值

`type()` 返回一个类型对象，这个类型对象表示所给对象的类型。例如，如果你传入一个字符串对象，`type()` 将返回 `<class 'str'>`。

### 示例

1. **基本数据类型**:
   ```python
   print(type(123))          # 输出: <class 'int'>
   print(type(3.14))         # 输出: <class 'float'>
   print(type("hello"))      # 输出: <class 'str'>
   print(type([1, 2, 3]))   # 输出: <class 'list'>
   print(type({"a": 1}))    # 输出: <class 'dict'>
   ```
'''
# 4.2 数值与字符串类型转换:
'''
在Python中，可以使用多种内置函数来在不同类型之间进行转换。以下是常见类型转换函数的列表及其描述：

### 数值与字符串之间的转换

| 函数    | 描述                                                     | 示例                                         |
|---------|----------------------------------------------------------|----------------------------------------------|
| `int()` | 将一个值转换为整数。如果是浮点数，会截断小数部分。          | `int("123")` -> `123`, `int(12.34)` -> `12`  |
| `float()` | 将一个值转换为浮点数。                                    | `float("12.34")` -> `12.34`, `float(123)` -> `123.0` |
| `str()` | 将一个值转换为字符串。                                     | `str(123)` -> `"123"`, `str(12.34)` -> `"12.34"` |
| `complex()` | 将一个值转换为复数（complex number）。                  | `complex(1, 2)` -> `(1+2j)`, `complex("1+2j")` -> `(1+2j)` |
| `bool()` | 将一个值转换为布尔类型。非零数值和非空对象转换为 `True`，零和空对象转换为 `False`。 | `bool(0)` -> `False`, `bool(123)` -> `True` |
| `hex()` | 将一个整数转换为十六进制字符串。                           | `hex(255)` -> `'0xff'`                       |
| `oct()` | 将一个整数转换为八进制字符串。                             | `oct(8)` -> `'0o10'`                         |
| `bin()` | 将一个整数转换为二进制字符串。                             | `bin(3)` -> `'0b11'`                         |
'''





