# 在 Python 中，random() 函数是 random 模块中的一部分，它返回一个 [0.0, 1.0) 区间内的随机浮点数


# from random import random
# s = random()
# print(s)

# random.random() 生成的浮点数默认是双精度浮点数（float 类型），
# 在 Python 中通常具有大约 15-17 位有效数字。这意味着它的显示精度取决于打印格式，但实际存储精度会更高。
# 一般情况下，它显示的小数位数可能在 15 位左右

# 查看内置函数命令(python交互式环境)
# >>> dir(__builtins__)



# 当然，以下是带有序号的 Python 3.x 内置函数列表：

# | 序号 | 函数            | 说明                                                    |
# |------|-----------------|---------------------------------------------------------|
# | 1    | `abs()`         | 返回数字的绝对值。                                      |
# | 2    | `all()`         | 如果可迭代对象的所有元素都为真（或可迭代对象为空），返回 `True`。|
# | 3    | `any()`         | 如果可迭代对象的任何元素为真，返回 `True`，否则返回 `False`。|
# | 4    | `ascii()`       | 返回对象的 ASCII 表示。                                 |
# | 5    | `bin()`         | 将整数转换为二进制字符串。                              |
# | 6    | `bool()`        | 将值转换为布尔值。                                     |
# | 7    | `breakpoint()`  | 启动调试器的内置函数（Python 3.7+）。                    |
# | 8    | `bytearray()`   | 返回一个新的 `bytearray` 对象。                          |
# | 9    | `bytes()`       | 返回一个新的 `bytes` 对象。                              |
# | 10   | `callable()`    | 检查对象是否可以被调用。                                |
# | 11   | `chr()`         | 返回指定 Unicode 代码点对应的字符。                    |
# | 12   | `classmethod()` | 返回一个类方法的函数。                                |
# | 13   | `compile()`     | 将源码编译为代码对象。                                 |
# | 14   | `complex()`     | 创建一个复数。                                         |
# | 15   | `delattr()`     | 删除对象的属性。                                       |
# | 16   | `dict()`        | 创建一个新的字典对象。                                 |
# | 17   | `dir()`         | 返回对象的属性和方法列表。                             |
# | 18   | `divmod()`      | 返回两个数的商和余数。                                 |
# | 19   | `enumerate()`   | 将可迭代对象的元素与其索引一起返回。                    |
# | 20   | `eval()`        | 执行字符串表达式并返回结果。                           |
# | 21   | `exec()`        | 执行字符串代码。                                      |
# | 22   | `exit()`        | 退出解释器（通常在交互式会话中使用）。                   |
# | 23   | `filter()`      | 过滤可迭代对象中的元素。                               |
# | 24   | `float()`       | 创建一个浮点数。                                       |
# | 25   | `format()`      | 格式化字符串。                                         |
# | 26   | `frozenset()`   | 创建一个不可变的集合。                                 |
# | 27   | `getattr()`     | 返回对象的属性值。                                     |
# | 28   | `globals()`     | 返回当前全局符号表的字典。                             |
# | 29   | `hasattr()`     | 检查对象是否具有指定的属性。                           |
# | 30   | `hash()`        | 返回对象的哈希值。                                     |
# | 31   | `help()`        | 调用内置的帮助系统。                                   |
# | 32   | `hex()`         | 将整数转换为十六进制字符串。                            |
# | 33   | `id()`          | 返回对象的唯一标识符。                                 |
# | 34   | `input()`       | 从用户输入中读取数据。                                |
# | 35   | `int()`         | 创建一个整数。                                         |
# | 36   | `isinstance()`  | 检查对象是否是指定类型的实例。                         |
# | 37   | `issubclass()`  | 检查类是否是另一个类的子类。                           |
# | 38   | `iter()`        | 返回一个迭代器对象。                                   |
# | 39   | `len()`         | 返回对象的长度（元素个数）。                           |
# | 40   | `license()`     | 返回有关许可证的信息（通常用于解释器的许可证）。       |
# | 41   | `list()`        | 创建一个新的列表。                                     |
# | 42   | `locals()`      | 返回当前局部符号表的字典。                             |
# | 43   | `map()`         | 将函数应用于可迭代对象的每个元素。                      |
# | 44   | `max()`         | 返回最大值。                                           |
# | 45   | `memoryview()`  | 返回一个内存视图对象。                                 |
# | 46   | `min()`         | 返回最小值。                                           |
# | 47   | `next()`        | 返回可迭代对象的下一个元素。                           |
# | 48   | `object()`      | 创建一个新对象。                                      |
# | 49   | `oct()`         | 将整数转换为八进制字符串。                            |
# | 50   | `open()`        | 打开一个文件并返回文件对象。                           |
# | 51   | `ord()`         | 返回字符的 Unicode 代码点。                            |
# | 52   | `pow()`         | 返回 x 的 y 次幂，或 x 的 y 次幂取模 z。                 |
# | 53   | `print()`       | 打印对象到控制台。                                     |
# | 54   | `property()`    | 返回一个属性的属性。                                   |
# | 55   | `quit()`        | 退出解释器（通常在交互式会话中使用）。                   |
# | 56   | `range()`       | 返回一个不可变的序列。                                 |
# | 57   | `repr()`        | 返回对象的字符串表示。                                 |
# | 58   | `reversed()`    | 返回一个反向迭代器。                                   |
# | 59   | `round()`       | 返回一个浮点数四舍五入后的值。                         |
# | 60   | `set()`         | 创建一个新的集合。                                     |
# | 61   | `setattr()`     | 设置对象的属性值。                                     |
# | 62   | `slice()`       | 创建一个切片对象。                                     |
# | 63   | `sorted()`      | 返回一个排序后的列表。                                |
# | 64   | `staticmethod()`| 返回一个静态方法的函数。                              |
# | 65   | `str()`         | 创建一个字符串。                                       |
# | 66   | `sum()`         | 返回可迭代对象中所有元素的总和。                        |
# | 67   | `super()`       | 返回父类的一个代理对象。                               |
# | 68   | `tuple()`       | 创建一个新的元组。                                     |
# | 69   | `type()`        | 返回对象的类型。                                       |
# | 70   | `vars()`        | 返回对象的 `__dict__` 属性。                            |
# | 71   | `zip()`         | 将多个可迭代对象的元素打包成元组。                      |

# 这些内置函数是 Python 提供的基本功能，用于各种任务，如数据处理、类型转换、对象操作等。



# __pycache__ 文件夹是 Python 编译字节码的缓存目录。下面是关于 __pycache__ 的详细信息：

# 什么是 __pycache__？
# 字节码缓存：当你运行 Python 脚本时，Python 会将 .py 文件编译成字节码（.pyc 文件），以便下次快速加载。这些字节码文件保存在 __pycache__ 文件夹中。
# 位置：__pycache__ 文件夹通常位于与源代码文件相同的目录下。

